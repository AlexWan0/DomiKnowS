from regr.graph import Graph, Concept, Relation, andL, nandL, notL, ifL, existsL


Graph.clear()
Concept.clear()
Relation.clear()

with Graph('global') as graph:
    graph.ontology = ('http://ontology.ihmc.us/ML/EMR.owl', './')

    with Graph('linguistic') as ling_graph:
        word = Concept(name='word')
        phrase = Concept(name='phrase')
        sentence = Concept(name='sentence')
        phrase.has_many(word)
        sentence.has_many(phrase)

        pair = Concept(name='pair')
        pair.has_a(phrase, phrase)

    with Graph('application') as app_graph:
        entity = Concept(name='entity')
        entity.is_a(phrase)

        people = Concept(name='people')
        organization = Concept(name='organization')
        location = Concept(name='location')
        other = Concept(name='other')
        o = Concept(name='O')

        people.is_a(entity)
        organization.is_a(entity)
        location.is_a(entity)
        other.is_a(entity)
        o.is_a(entity)

        #people.not_a(organization)
        nandL(people, organization)
        #people.not_a(location)
        nandL(people, location)
        #people.not_a(other)
        nandL(people, other)
        #people.not_a(o)
        nandL(people, o)
        #organization.not_a(people)
        nandL(organization, people)
        #organization.not_a(location)
        nandL(organization, location)
        #organization.not_a(other)
        nandL(organization, other)
        #organization.not_a(o)
        nandL(organization, o)
        #location.not_a(people)
        nandL(location, people)
        #location.not_a(organization)
        nandL(location, organization)
        #location.not_a(other)
        nandL(location, other)
        #location.not_a(o)
        nandL(location, o)
        #other.not_a(people)
        nandL(other, people)
        #other.not_a(organization)
        nandL(other, organization)
        #other.not_a(location)
        nandL(other, location)
        #other.not_a(o)
        nandL(other, o)
        #o.not_a(people)
        nandL(o, people)
        #o.not_a(organization)
        nandL(o, organization)
        #o.not_a(location)
        nandL(o, location)
        #o.not_a(other)
        nandL(o, other)

        work_for = Concept(name='work_for')
        work_for.is_a(pair)

        located_in = Concept(name='located_in')
        located_in.is_a(pair)

        live_in = Concept(name='live_in')
        live_in.is_a(pair)

        orgbase_on = Concept(name='orgbase_on')
        orgbase_on.is_a(pair)

        kill = Concept(name='kill')
        kill.is_a(pair)

        #work_for.has_a(people, organization)
        ifL(work_for, ('x','y'), people, ('x',))
        ifL(work_for, ('x','y'), organization, ('y',))
        #located_in.has_a(location, location)
        ifL(located_in, ('x','y'), location, ('x',))
        ifL(located_in, ('x','y'), location, ('y',))
        #live_in.has_a(people, location)
        ifL(live_in, ('x','y'), people, ('x',))
        ifL(live_in, ('x','y'), location, ('y',))
        #orgbase_on.has_a(organization, location)
        ifL(orgbase_on, ('x','y'), organization, ('x',))
        ifL(orgbase_on, ('x','y'), location, ('y',))
        #kill.has_a(people, people)
        ifL(kill, ('x','y'), people, ('x',))
        ifL(kill, ('x','y'), people, ('y',))
